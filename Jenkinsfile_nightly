properties([
  // H allow predefined but random minute see https://en.wikipedia.org/wiki/Cron#Non-standard_characters
  pipelineTriggers([cron('H 05 * * *')]),
  parameters([
    string(name: 'URL_TO_TEST', defaultValue: 'http://sptribs-case-api-aat.service.core-compute-aat.internal', description: 'The URL you want to run these tests against'),
    string(name: 'SecurityRules',
      defaultValue: 'http://raw.githubusercontent.com/hmcts/security-test-rules/master/conf/security-rules.conf',
      description: 'The URL you want to run these tests against'),
  ])
])

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "sptribs"
def component = "case-api"

GradleBuilder builder = new GradleBuilder(this, product)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
  'sptribs-${env}'    :[
    secret('idam-secret', 'OAUTH2_CLIENT_SECRET'),
    secret('idam-solicitor-username', 'IDAM_SOLICITOR_USERNAME'),
    secret('idam-solicitor-password', 'IDAM_SOLICITOR_PASSWORD')
  ]
]

withNightlyPipeline(type, product, component) {
  env.TEST_URL = "http://sptribs-case-api-aat.service.core-compute-aat.internal"
  loadVaultSecrets(secrets)
  enableSlackNotifications('#special-tribunals-builds')
  enableFortifyScan()
  enableFullFunctionalTest()

  afterAlways('fortify-scan') {
    steps.archiveArtifacts allowEmptyArchive: true, artifacts: '**/Fortify Scan/**/*'
  }

  afterAlways('fullFunctionalTest') {
    archiveArtifacts allowEmptyArchive: true, artifacts: 'output/**/*'
  }

  afterSuccess('fullFunctionalTest') {

    Exception ex = null;
    try {
      builder.gradle('e2eTestsNightlyFirefox')
    } catch (Exception caught) {
      ex = caught;
    } finally {

      publishHTML target: [
        allowMissing         : true,
        alwaysLinkToLastBuild: true,
        keepAll              : true,
        reportDir            : "build/reports/tests/e2eTestsNightlyFirefox",
        reportFiles          : "index.html",
        reportName           : "E2E Tests Report Firefox"
      ]
      try {
        builder.gradle('e2eTestsNightlyMsEdge')
      } finally {

        publishHTML target: [
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "build/reports/tests/e2eTestsNightlyMsEdge",
          reportFiles          : "index.html",
          reportName           : "E2E Tests Report MS Edge"
        ]
        if (ex != null) {
          throw ex;
        }
      }
    }
  }
}
