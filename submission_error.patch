Index: src/test/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerDraftOrderTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerDraftOrderTest.java b/src/test/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerDraftOrderTest.java
--- a/src/test/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerDraftOrderTest.java	(revision 8b1b2b745dda74bb8cb2bb88a6937e2e96792e61)
+++ b/src/test/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerDraftOrderTest.java	(date 1669285242382)
@@ -52,7 +52,9 @@
         final CaseData caseData = caseData();
         final CaseDetails<CaseData, State> updatedCaseDetails = new CaseDetails<>();
         final CaseDetails<CaseData, State> beforeDetails = new CaseDetails<>();
-
+        final DraftOrderCIC draftOrderCIC = new DraftOrderCIC();
+        draftOrderCIC.setMainContentForGeneralDirections("General Directions");
+        caseData.setDraftOrderCIC(draftOrderCIC);
         updatedCaseDetails.setData(caseData);
         updatedCaseDetails.setId(TEST_CASE_ID);
         updatedCaseDetails.setCreatedDate(LOCAL_DATE_TIME);
@@ -63,11 +65,45 @@
 
         SubmittedCallbackResponse draftCreatedResponse = caseWorkerDraftOrder.draftCreated(updatedCaseDetails, beforeDetails);
         //  Then
+        assertThat(response.getData().getDraftOrderCICList()).isNotNull();
         assertThat(draftCreatedResponse).isNotNull();
+        assertThat(response.getData().getDraftOrderCICList().get(0).getValue()
+            .getMainContentForGeneralDirections()).isEqualTo("General Directions");
 
     }
 
+    @Test
+    void shouldSuccessfullySave2DraftOrder() {
+        //Given
+        final CaseData caseData = caseData();
+        final CaseDetails<CaseData, State> updatedCaseDetails = new CaseDetails<>();
+        final CaseDetails<CaseData, State> beforeDetails = new CaseDetails<>();
+        final DraftOrderCIC draftOrderCIC = new DraftOrderCIC();
+        draftOrderCIC.setMainContentForGeneralDirections("DMI Reports");
+        caseData.setDraftOrderCIC(draftOrderCIC);
+        updatedCaseDetails.setData(caseData);
+        updatedCaseDetails.setId(TEST_CASE_ID);
+        updatedCaseDetails.setCreatedDate(LOCAL_DATE_TIME);
+
+        //When
+        AboutToStartOrSubmitResponse<CaseData, State> response =
+            caseWorkerDraftOrder.aboutToSubmit(updatedCaseDetails, beforeDetails);
 
+        assertThat(response).isNotNull();
+        assertThat(response.getData().getDraftOrderCICList()).hasSize(1);
+
+        final DraftOrderCIC draftOrderCIC2 = new DraftOrderCIC();
+        draftOrderCIC2.setMainContentForDmiReports("Da");
+        caseData.setDraftOrderCIC(draftOrderCIC2);
+        updatedCaseDetails.setData(caseData);
+        AboutToStartOrSubmitResponse<CaseData, State> response2 =
+            caseWorkerDraftOrder.aboutToSubmit(updatedCaseDetails, beforeDetails);
+
+        //  Then
+        assertThat(response2.getData().getDraftOrderCICList()).hasSize(2);
+        assertThat(response2.getData().getDraftOrderCICList().get(0).getValue().getOrderTemplate()).isNotNull();
+
+    }
 
     @Test
     void shouldSuccessfullyReviewCase() {
Index: src/main/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerCreateDraftOrder.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerCreateDraftOrder.java b/src/main/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerCreateDraftOrder.java
--- a/src/main/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerCreateDraftOrder.java	(revision 8b1b2b745dda74bb8cb2bb88a6937e2e96792e61)
+++ b/src/main/java/uk/gov/hmcts/sptribs/caseworker/event/CaseWorkerCreateDraftOrder.java	(date 1669285152125)
@@ -6,7 +6,9 @@
 import uk.gov.hmcts.ccd.sdk.api.CaseDetails;
 import uk.gov.hmcts.ccd.sdk.api.ConfigBuilder;
 import uk.gov.hmcts.ccd.sdk.api.callback.AboutToStartOrSubmitResponse;
+import uk.gov.hmcts.ccd.sdk.type.ListValue;
 import uk.gov.hmcts.reform.ccd.client.model.SubmittedCallbackResponse;
+import uk.gov.hmcts.sptribs.caseworker.model.DraftOrderCIC;
 import uk.gov.hmcts.sptribs.ciccase.model.CaseData;
 import uk.gov.hmcts.sptribs.ciccase.model.State;
 import uk.gov.hmcts.sptribs.ciccase.model.UserRole;
@@ -15,6 +17,11 @@
 import uk.gov.hmcts.sptribs.common.event.page.CreateDraftOrder;
 import uk.gov.hmcts.sptribs.common.event.page.PreviewDraftOrder;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import static org.springframework.util.CollectionUtils.isEmpty;
 import static uk.gov.hmcts.sptribs.ciccase.model.State.AwaitingHearing;
 import static uk.gov.hmcts.sptribs.ciccase.model.State.AwaitingOutcome;
 import static uk.gov.hmcts.sptribs.ciccase.model.State.CaseClosed;
@@ -54,17 +61,48 @@
         final CaseDetails<CaseData, State> details,
         final CaseDetails<CaseData, State> beforeDetails
     ) {
+        var caseData = details.getData();
+        var draftOrder = caseData.getDraftOrderCIC();
+
+        if (isEmpty(caseData.getDraftOrderCICList())) {
+            List<ListValue<DraftOrderCIC>> listValues = new ArrayList<>();
+
+            var listValue = ListValue
+                .<DraftOrderCIC>builder()
+                .id("1")
+                .value(draftOrder)
+                .build();
+
+            listValues.add(listValue);
 
+            caseData.setDraftOrderCICList(listValues);
+        } else {
+            AtomicInteger listValueIndex = new AtomicInteger(0);
+            var listValue = ListValue
+                .<DraftOrderCIC>builder()
+                .value(draftOrder)
+                .build();
+
+            caseData.getDraftOrderCICList().add(0, listValue); // always add new note as first element so that it is displayed on top
+
+            caseData.getDraftOrderCICList().forEach(
+                caseDraftOrderCic -> caseDraftOrderCic.setId(String.valueOf(listValueIndex.incrementAndGet()))
+            );
+
+        }
+
+        caseData.setDraftOrderCIC(null);
         return AboutToStartOrSubmitResponse.<CaseData, State>builder()
+            .data(caseData)
             .state(details.getState())
             .build();
 
     }
 
     public SubmittedCallbackResponse draftCreated(CaseDetails<CaseData, State> details,
-                                                       CaseDetails<CaseData, State> beforeDetails) {
+                                                  CaseDetails<CaseData, State> beforeDetails) {
         return SubmittedCallbackResponse.builder()
-            .confirmationHeader("Draft order created. ")
+            .confirmationHeader("# Draft order created")
             .build();
     }
 }
