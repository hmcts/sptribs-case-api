#!groovy

@Library("Infrastructure")

import uk.gov.hmcts.contino.AppPipelineConfig
import uk.gov.hmcts.contino.AppPipelineDsl
import uk.gov.hmcts.contino.GradleBuilder
import uk.gov.hmcts.contino.MetricsPublisher
import uk.gov.hmcts.contino.GithubAPI

def type = "java"
def product = "sptribs"
def component = "case-api"

GradleBuilder builder = new GradleBuilder(this, product)

static Map<String, Object> secret(String secretName, String envVariable) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   envVariable: envVariable
  ]
}

def secrets = [
        's2s-${env}'      : [
                secret('microservicekey-ccd-data', 'DATA_STORE_S2S_KEY'),
                secret('microservicekey-ccd-definition', 'DEFINITION_STORE_S2S_KEY'),
                secret('microservicekey-ccd-gw', 'CCD_API_GATEWAY_S2S_KEY'),
                secret('microservicekey-ccd-admin', 'ADMIN_S2S_KEY'),
                secret('microservicekey-ccd-data', 'CCD_DATA_STORE_S2S_SECRET'),
                secret('microservicekey-ccd-definition', 'CCD_DEFINITION_STORE_S2S_SECRET')
        ],
        'ccd-${env}'      : [
                secret('ccd-api-gateway-oauth2-client-secret', 'CCD_API_GATEWAY_OAUTH2_CLIENT_SECRET'),
                secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
                secret('postcode-info-address-lookup-token', 'ADDRESS_LOOKUP_TOKEN'),
                secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
                secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
                secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
        ],
        'sptribs-${env}'    :[
                secret('app-insights-instrumentation-key', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
                secret('idam-secret', 'OAUTH2_CLIENT_SECRET'),
                secret('idam-solicitor-username', 'IDAM_SOLICITOR_USERNAME'),
                secret('idam-solicitor-password', 'IDAM_SOLICITOR_PASSWORD'),
                secret('idam-systemupdate-username', 'IDAM_SYSTEM_UPDATE_USERNAME'),
                secret('idam-systemupdate-password', 'IDAM_SYSTEM_UPDATE_PASSWORD'),
                secret('citizen-user', 'IDAM_CITIZEN_USERNAME'),
                secret('citizen-password', 'IDAM_CITIZEN_PASSWORD'),
                secret('sptribs-postgres-username-preview', 'SPTRIBS_POSTGRES_USERNAME_PREVIEW'),
                secret('sptribs-postgres-password-preview', 'SPTRIBS_POSTGRES_PASSWORD_PREVIEW'),
                secret('ccd-global-postgres-username-preview', 'CCD_GLOBAL_POSTGRES_USERNAME_PREVIEW'),
                secret('ccd-global-postgres-password-preview', 'CCD_GLOBAL_POSTGRES_PASSWORD_PREVIEW'),
                secret('ccd-data-store-db-username-preview', 'CCD_DATA_STORE_DB_USERNAME_PREVIEW'),
                secret('ccd-data-store-db-password-preview', 'CCD_DATA_STORE_DB_PASSWORD_PREVIEW'),
                secret('ccd-user-profile-db-username-preview', 'CCD_USER_PROFILE_DB_USERNAME_PREVIEW'),
                secret('ccd-user-profile-db-password-preview', 'CCD_USER_PROFILE_DB_PASSWORD_PREVIEW'),
                secret('em-spring-datasource-username-preview', 'EM_SPRING_DATASOURCE_USERNAME_PREVIEW'),
                secret('em-spring-datasource-password-preview', 'EM_SPRING_DATASOURCE_PASSWORD_PREVIEW'),
                secret('s2s-case-api-secret', 'S2S_SECRET')
        ],
        'wa-${env}'    :[
          secret('wa-system-username', 'IDAM_WA_SENIOR_CASEWORKER_USERNAME'),
          secret('wa-system-password', 'IDAM_WA_SENIOR_CASEWORKER_PASSWORD')
        ],
        'civil-${env}'    :[
          secret('ccd-importer-username', 'DEFINITION_IMPORTER_USERNAME'),
          secret('ccd-importer-password', 'DEFINITION_IMPORTER_PASSWORD')
        ]
]

AppPipelineConfig pipelineConf = new AppPipelineConfig()
pipelineConf.vaultSecrets = secrets

env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'

withPipeline(type, product, component) {
    enableAksStagingDeployment()
    disableLegacyDeployment()
    loadVaultSecrets(secrets)
    syncBranchesWithMaster(['demo', 'perftest', 'ithc'])
    afterSuccess('checkout') {
      def subscription = 'nonprod'
      if (env.ENVIRONMENT == 'ithc' || env.ENVIRONMENT == 'demo' || env.ENVIRONMENT == 'perftest') {
        withSubscription(subscription) {
            uploadDmnDiagrams()
            uploadBpmnDiagram()
        }
      }
    }
    enableSlackNotifications('#special-tribunals-builds')
    MetricsPublisher metricsPublisher = new MetricsPublisher(this, currentBuild, product, component)
    approvedEnvironmentRepository(params.environment, metricsPublisher) {
      if(params.environment != 'prod') {
        enableHighLevelDataSetup()
      }
    }

  afterAlways('test') {
    builder.gradle('jacocoTestReport')

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "main.html",
      reportName           : "Checkstyle Main Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "test.html",
      reportName           : "Checkstyle Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "functionalTest.html",
      reportName           : "Checkstyle Functional Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/checkstyle",
      reportFiles          : "integrationTest.html",
      reportName           : "Checkstyle Integration Test Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/integration",
      reportFiles          : "index.html",
      reportName           : "Integration Tests Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/test",
      reportFiles          : "index.html",
      reportName           : "Unit Tests Report"
    ]

    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/pmd",
      reportFiles          : "main.html",
      reportName           : "PMD Report"
    ]
  }

  afterAlways('functionalTest:preview') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]
  }

  afterAlways('functionalTest:aat') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/functional",
      reportFiles          : "index.html",
      reportName           : "Functional Tests Report"
    ]
  }

  afterAlways('smoketest:preview') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/smoke",
      reportFiles          : "index.html",
      reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('smoketest:aat') {
    publishHTML target: [
      allowMissing         : true,
      alwaysLinkToLastBuild: true,
      keepAll              : true,
      reportDir            : "build/reports/tests/smoke",
      reportFiles          : "index.html",
      reportName           : "Smoke Test Report"
    ]
  }

  afterAlways('checkout') {
    builder.gradle('generateCCDConfig')
    generateDefinitions()
  }

  onPR {
    env.ENVIRONMENT="preview"
    env.CASE_API_URL = "http://sptribs-case-api-pr-${CHANGE_ID}-java"
    env.TEST_URL = "http://sptribs-case-api-pr-${CHANGE_ID}-java"
    env.CCD_DEF_NAME = "preview"
    env.DEFINITION_STORE_URL_BASE = "https://ccd-definition-store-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.CASE_DATA_STORE_BASEURL = "https://ccd-data-store-api-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.CASE_DOCUMENT_AM_BASEURL= "http://ccd-case-document-am-api-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.TEST_S2S_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.CITIZEN_UPDATE_CASE_STATE_ENABLED=true
    env.SERVICE_AUTH_MICROSERVICE = "sptribs_case_api"
    env.SERVICE_AUTH_PROVIDER_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.TEST_E2E_URL = "https://xui-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
    env.WA_FEATURE_ENABLED = true
    setCommonEnvVariables()

    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }

  onMaster {
    env.ENVIRONMENT="aat"
    env.CASE_API_URL="http://sptribs-case-api-aat.service.core-compute-aat.internal"
    env.CCD_DEF_NAME="aat"
    env.ELASTIC_SEARCH_ENABLED=true
    env.CITIZEN_UPDATE_CASE_STATE_ENABLED=true
    env.SERVICE_AUTH_MICROSERVICE = "sptribs_case_api"
    env.SERVICE_AUTH_PROVIDER_URL = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    setCommonEnvVariables()

    enablePactAs([AppPipelineDsl.PactRoles.CONSUMER])
  }

  afterSuccess('functionalTest:aat') {
      env.ENVIRONMENT="prod"
      env.CASE_API_URL="http://sptribs-case-api-prod.service.core-compute-prod.internal"
      env.CCD_DEF_NAME="prod"
      env.DEFINITION_STORE_URL_BASE="http://ccd-definition-store-api-prod.service.core-compute-prod.internal"
      env.CITIZEN_UPDATE_CASE_STATE_ENABLED=false
      env.CASE_API_DOCUMENT_DOWNLOAD_URL = "http://manage-case.platform.hmcts.net/"
      env.SERVICE_AUTH_MICROSERVICE = "sptribs_case_api"
      env.SERVICE_AUTH_PROVIDER_URL = "http://rpe-service-auth-provider-prod.service.core-compute-prod.internal"
      env.IDAM_API_URL_BASE = "https://idam-api.platform.hmcts.net"
      env.S2S_URL_BASE = "http://rpe-service-auth-provider-prod.service.core-compute-prod.internal"
      env.BEFTA_S2S_CLIENT_ID = "ccd_data"

      builder.gradle('generateCCDConfig --rerun-tasks')

      generateDefinitions()
  }

  def githubApi = new GithubAPI(this) as Object
  if (githubApi.getLabelsbyPattern(env.BRANCH_NAME, "enable-e2e-tests")) {
    afterSuccess('functionalTest:preview') {
      try {
        builder.gradle('e2eTests')
      } finally {
        publishHTML target: [
          allowMissing         : true,
          alwaysLinkToLastBuild: true,
          keepAll              : true,
          reportDir            : "build/reports/tests/e2eTests",
          reportFiles          : "index.html",
          reportName           : "E2E Tests Report"
        ]
      }
    }
  }

  afterSuccess('akschartsinstall') {
    onPR {
      for (label in githubApi.getLabelsbyPattern(env.BRANCH_NAME, "pr-values:wa") ) {
        env.CAMUNDA_BASE_URL = "https://camunda-sptribs-case-api-pr-${CHANGE_ID}.preview.platform.hmcts.net"
        println """After akschartsinstall upload DNM and BPMN diagrams""".stripIndent()
        sh 'chmod -R +x ./bin'
        uploadDmnDiagrams()
        uploadBpmnDiagram()
      }
    }
  }

  onDemo {
    env.ENVIRONMENT="demo"
    env.CASE_API_URL = "http://sptribs-case-api-demo.service.core-compute-demo.internal"
    env.CASE_API_DOCUMENT_DOWNLOAD_URL = "http://manage-case.demo.platform.hmcts.net/"
    env.CCD_DEF_NAME = "demo"
    env.IDAM_API_URL_BASE = "https://idam-api.demo.platform.hmcts.net"
    env.S2S_URL_BASE = "http://rpe-service-auth-provider-demo.service.core-compute-demo.internal"
    env.CAMUNDA_BASE_URL = "http://camunda-api-demo.service.core-compute-demo.internal"
  }

  onPerftest {
    env.ENVIRONMENT="perftest"
    env.CASE_API_URL = "http://sptribs-case-api-perftest.service.core-compute-perftest.internal"
    env.CCD_DEF_NAME = "perftest"
    env.IDAM_API_URL_BASE = "https://idam-api.perftest.platform.hmcts.net"
    env.S2S_URL_BASE = "http://rpe-service-auth-provider-perftest.service.core-compute-perftest.internal"
    env.FEE_API_URL = "http://fees-register-api-demo.service.core-compute-demo.internal"
    env.CAMUNDA_BASE_URL = "http://camunda-api-perftest.service.core-compute-perftest.internal"
  }

  onIthc {
    env.ENVIRONMENT="ithc"
    env.CASE_API_URL = "http://sptribs-case-api-ithc.service.core-compute-ithc.internal"
    env.CCD_DEF_NAME = "ithc"
    env.IDAM_API_URL_BASE = "https://idam-api.ithc.platform.hmcts.net"
    env.S2S_URL_BASE = "http://rpe-service-auth-provider-ithc.service.core-compute-ithc.internal"
    env.FEE_API_URL = "http://fees-register-api-demo.service.core-compute-ithc.internal"
    env.CAMUNDA_BASE_URL = "http://camunda-api-ithc.service.core-compute-ithc.internal"
  }

  before('functionalTest:preview') {
    // Only for preview upload the definitions via script as high level data set up relies on an existing environment
    uploadCoreCaseDataDefinitions()
  }

// TODO Enable on aat once Demo testing complete
//  before('functionalTest:aat') {
//    uploadDmnDiagrams()
//    uploadBpmnDiagram()
//  }
}

def setCommonEnvVariables() {
    env.IDAM_API_URL_BASE = "https://idam-api.aat.platform.hmcts.net"
    env.S2S_URL_BASE = "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
    env.FEE_API_URL = "http://fees-register-api-aat.service.core-compute-aat.internal"
    env.BEFTA_S2S_CLIENT_ID = "ccd_data"
}

def uploadCoreCaseDataDefinitions() {
    dir("${WORKSPACE}/bin"){
        sh "./add-roles.sh"
        sh "./process-and-import-ccd-definition.sh"
    }
    dir("${WORKSPACE}") {
        steps.archiveArtifacts artifacts: "build/ccd-config/*.xlsx"
    }
}

def generateDefinitions() {
  dir("${WORKSPACE}/bin") {
    sh "./ccd-build-definition.sh"
  }
  dir("${WORKSPACE}") {
    steps.archiveArtifacts artifacts: "build/ccd-config/*.xlsx"
  }
}

def uploadDmnDiagrams() {
  dir("${WORKSPACE}/bin") {
    tenantId = "st_cic"
    product = "st_cic"
    sh "./wa/import-dmn-diagram.sh ${WORKSPACE} ${env} ${tenantId} ${product}"
  }
}

def uploadBpmnDiagram() {
  dir("${WORKSPACE}/bin") {
    bpmnBranch = "master"
    sh """
      ./wa/pull-latest-camunda-wa-files.sh ${bpmnBranch}
      ./wa/import-wa-bpmn-diagram.sh .
    """
  }
}
